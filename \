const vga = @import("drivers").vga;

pub fn kprintf(comptime fmt: []const u8, args: anytype) void
{
    comptime var arg_idx: usize = 0;
    comptime var last_c: u8 = 0;

    inline for(fmt) |c|
    {
        if(c == '%' and last_c != '\\')
        {
            printArg(args[arg_idx]);
            arg_idx += 1;
        }
        else
            vga.putChar(c);
        last_c = c;
    }

    comptime
    {
        if(args.len != arg_idx)
            @compileError("unused arguments");
    }
}

fn printArg(arg: anytype) void
{
    if(@typeInfo(@TypeOf(arg)) == .Pointer)
        @compileError("pointers printing is not supported yet")
    else if(@typeInfo(@TypeOf(arg)) == .Array)
    {
        if(@TypeOf(arg) == u8)
            vga.putString(arg)
        else
            @compileError("arrays printing is not supported yet");
    }
    else if(@typeInfo(@TypeOf(arg)) == .ComptimeInt)
        putNb(arg)
    else if(@typeInfo(@TypeOf(arg)) == .ComptimeFloat)
        @compileError("floats printing is not supported yet")
    else
        @compileError("invalid type to print; " ++ @typeName(@TypeOf(arg)));
}

fn putNb(nbr: i64) void
{
    if(nbr <= -2147483648)
        vga.putString("-2147483648")
    else if(nbr >= 2147483647)
        vga.putString("2147483647")
    else if(nbr < 0)
    {
        vga.putChar('-');
        putNb(-nbr);
    }
    else if(nbr >= 10)
    {
        putNb(@divFloor(nbr, 10));
        const  c: u8 = @mod(nbr, 10) + 48;
        vga.putChar(c);
    }
    else
        vga.putChar(@as(u8, nbr + 48));
}
